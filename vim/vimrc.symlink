" -------------------------
" GENERAL
" -------------------------

" Must be called first
filetype off

call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

"This must be first, because it changes other options as a side effect.
set nocompatible

"allow backspacing over everything in insert mode
set backspace=indent,eol,start

"store lots of :cmdline history
set history=1000

"color theme for terminal vim
colors pablo

" -------------------------
" /GENERAL
" -------------------------

" -------------------------
" BACKUPS
" -------------------------
set nobackup                      " do not keep backups after close
set nowritebackup                 " do not keep a backup while working
set noswapfile                    " don't keep swp files either
set backupdir=$HOME/.vimbackup    " store backups under ~/.vimbackup
set backupcopy=yes                " keep attributes of original file
set backupskip=/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*
set directory=~/.vimswap,~/tmp,. " keep swp files under ~/.vimswap
" -------------------------
" /BACKUPS
" -------------------------

" -------------------------
" STATUSLINE
" -------------------------
"return the syntax highlight group under the cursor ''
function! StatuslineCurrentHighlight()
    let name = synIDattr(synID(line('.'),col('.'),1),'name')
    if name == ''
        return ''
    else
        return '[' . name . ']'
    endif
endfunction

let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1
let g:syntastic_quiet_warnings=1

set statusline=%f       "tail of the filename

"display a warning if fileformat isnt unix
set statusline+=%#warningmsg#
set statusline+=%{&ff!='unix'?'['.&ff.']':''}
set statusline+=%*

"display a warning if file encoding isnt utf-8
set statusline+=%#warningmsg#
set statusline+=%{(&fenc!='utf-8'&&&fenc!='')?'['.&fenc.']':''}
set statusline+=%*

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

set statusline+=%h      "help file flag
set statusline+=%y      "filetype
set statusline+=%r      "read only flag
set statusline+=%m      "modified flag

"display a warning if &et is wrong, or we have mixed-indenting
set statusline+=%#error#
set statusline+=%*

set statusline+=%#warningmsg#
set statusline+=%*

"display a warning if &paste is set
set statusline+=%#error#
set statusline+=%{&paste?'[paste]':''}
set statusline+=%*

set statusline+=%=      "left/right separator
set statusline+=%{StatuslineCurrentHighlight()} "current highlight
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file
" -------------------------
" /STATUSLINE
" -------------------------

" -------------------------
" GRAPHICAL
" -------------------------
"Visual
set ruler                  " show the cursor position all the time
set cursorline             " highlight current line
" set gcr=a:blinkon0         " disable blinking cursor
set nolazyredraw           " turn off lazy redraw
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
" set ch=2                   " command line height
" set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling

"Visual Cues
set showmatch             " brackets/braces that is
set mat=5                 " duration to show matching brace (1/10 sec)
set laststatus=2          " always show the status line
set ignorecase            " ignore case when searching
set smartcase             " case only matters with mixed case expressions
set visualbell            " shut the fuck up
set showcmd               " show incomplete cmds down the bottom
set showmode              " show current mode down the bottom
set incsearch             " find the next match as we type the search
set hlsearch              " hilight searches by default
set nowrap                " don't wrap lines
set linebreak             " wrap lines at convenient points
set autoread              " reload files (no local changes only)
" -------------------------
" /GRAPHICAL
" -------------------------

" -------------------------
" MAPPINGS
" -------------------------
" remap <LEADER> to ',' (instead of '\')
let mapleader = ","
" escape with ñ
imap ñ <ESC>

map <s-D-Left> <C-w><Left>
map <s-D-Right> <C-w><Right>
map <s-D-Up> <C-w><Up>
map <s-D-Down> <C-w><Down>

map <D-H> <C-W>H<CR>
map <D-V> <C-W>K<CR>

map <D-C> :vsplit<CR>
map <D-R> :split<CR>

imap <D-1> <Esc>:tabn 1<CR>i
imap <D-2> <Esc>:tabn 2<CR>i
imap <D-3> <Esc>:tabn 3<CR>i
imap <D-4> <Esc>:tabn 4<CR>i
imap <D-5> <Esc>:tabn 5<CR>i
imap <D-6> <Esc>:tabn 6<CR>i
imap <D-7> <Esc>:tabn 7<CR>i
imap <D-8> <Esc>:tabn 8<CR>i
imap <D-9> <Esc>:tabn 9<CR>i

map <D-1> :tabn 1<CR>
map <D-2> :tabn 2<CR>
map <D-3> :tabn 3<CR>
map <D-4> :tabn 4<CR>
map <D-5> :tabn 5<CR>
map <D-6> :tabn 6<CR>
map <D-7> :tabn 7<CR>
map <D-8> :tabn 8<CR>
map <D-9> :tabn 9<CR>

" Leader shortcuts for Rails commands
" Props to @malditogeek
map <Leader>m :Rmodel
map <Leader>c :Rcontroller
map <Leader>v :Rview
map <Leader>u :Runittest
map <Leader>f :Rfunctionaltest
map <Leader>tm :RTmodel
map <Leader>tc :RTcontroller
map <Leader>tv :RTview
map <Leader>tu :RTunittest
map <Leader>tf :RTfunctionaltest
map <Leader>sm :RSmodel
map <Leader>sc :RScontroller
map <Leader>sv :RSview
map <Leader>su :RSunittest
map <Leader>sf :RSfunctionaltest

map <Leader>e <D-Up>O# encoding: utf-8<CR><Esc>

" -------------------------
" MAPPINGS
" -------------------------

"indent settings
set shiftwidth=2
set ts=2
set bs=2
set shiftround
set softtabstop=2
set expandtab
set smarttab
set autoindent

"folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default

set wildmode=list:longest   "make cmdline tab completion similar to bash
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches

"stuff to ignore when tab completing
set wildignore=*.o,*.obj,*~,.git,*.swp,*.jpg,*.png,*.gif

"display tabs and trailing spaces
set list
set listchars=tab:‣\ ,trail:⋅,nbsp:⋅
" set listchars+=eol:¬,extends:>,precedes:<
nmap <leader>i :set list!<CR>

set formatoptions-=o "dont continue comments when pushing o/O

"vertical/horizontal scroll off settings
set scrolloff=3
set sidescrolloff=7
set sidescroll=1

"load ftplugins and indent files
filetype plugin on
filetype indent on

"turn on syntax highlighting
syntax on

" activate omnicomplete
set ofu=syntaxcomplete#Complete
let g:acp_behaviorKeywordLength = 4

"some stuff to get the mouse going in term
set mouse=a
set ttymouse=xterm2

"tell the term has 256 colors
set t_Co=256

"hide buffers when not displayed
set hidden

" utf-8 default encoding
set enc=utf-8

"ctags
set tags=ctags

"dont load csapprox if we no gui support - silences an annoying warning
if !has("gui")
    let g:CSApprox_loaded = 1
endif

"make <c-l> clear the highlight as well as redraw
nnoremap <C-L> :nohls<CR><C-L>
inoremap <C-L> <C-O>:nohls<CR>

"make <D-intro> jump add new line as in Textmate
inoremap <D-CR> <ESC>o

"map to NERDtree
nnoremap <c-t> :NERDTreeToggle<CR>
" ,p to show current file in the tree
nmap <leader>p :NERDTreeFind<CR>

"map to bufexplorer
nnoremap <C-B> :BufExplorer<cr>

"map to fuzzy finder text mate stylez
nnoremap <c-f> :CommandTFlush<CR>:CommandT<CR>

"comment lines as with textmate
nmap <D-D> :TComment<cr>
vmap <D-D> :TComment<cr>

"map Q to something useful
noremap Q gq

"make Y consistent with C and D
nnoremap Y y$

" -------------------
" KEYBINDS
" -------------------
"Move lines up and down
map <C-J> :m +1 <CR>
map <C-K> :m -2 <CR>

" switch between buffers
map <C-Tab> :bn<CR>
map <C-s-Tab> :bp<CR>

" save buffer and close
nmap <Leader>wq :up<CR>:bd<CR>

" move faster around up and down
nnoremap <space> :+15<cr>
nnoremap <C-Down> :+15<cr>
inoremap <C-Down> :+15<cr>
nnoremap <s-space> :-15<cr>
nnoremap <C-Up> :-15<cr>
inoremap <C-Up> :-15<cr>

nnoremap <s-Right> v<Right>
inoremap <s-Right> <Esc><Right>v<Right>
vnoremap <s-Right> <Right>

"Duplicate a selection
vmap D y'>p

"one-key indentation
nmap <Tab> >>
nmap <S-Tab> <<

" Indent selection
vmap <Tab> >gv
vmap <S-Tab> <gv

" Experiment so select with shift-arrows
"Easier beginning/end of line
map <Leader>h ^
map <Leader>l $

" -------------------
" /KEYBINDS
" -------------------

"No Help, please
nmap <F1> <Esc>

"Numbers
set number
set numberwidth=5

"jump to last cursor position when opening a file
"dont do it when writing a commit log entry
autocmd BufReadPost * call SetCursorPosition()
function! SetCursorPosition()
    if &filetype !~ 'commit\c'
        if line("'\"") > 0 && line("'\"") <= line("$")
            exe "normal! g`\""
            normal! zz
        endif
    end
endfunction

" -------------------
" AUTO & OTHERS
" -------------------

" Project Tree
" autocmd VimEnter * call s:CdIfDirectory(expand("<amatch>"))

" Disable netrw's autocmd, since we're ALWAYS using NERDTree
runtime plugin/netRwPlugin.vim
augroup FileExplorer
  au!
augroup END

" Source the vimrc file after saving it
" autocmd bufwritepost .vimrc source ~/.vimrc
nmap <leader>v :tabedit ~/.vimrc<CR>

let g:NERDTreeHijackNetrw = 0
let g:CommandTMaxHeight=10

" If the parameter is a directory, cd into it
function! s:CdIfDirectory(directory)
  if isdirectory(a:directory)
    call ChangeDirectory(a:directory)
  endif
endfunction

" Max height of
" NERDTree utility function
function! s:UpdateNERDTree(stay)
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      NERDTree
      if !a:stay
        wincmd p
      end
    endif
  endif
endfunction

autocmd BufWritePre * :%s/\s\+$//e

" New filetypes
autocmd BufNewFile,BufRead *.thor setf ruby

" Mark as red every character after 80
" :au BufWinEnter * let w:m1=matchadd('Search', '\\%<81v.\\%>77v', -1)
" :au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\\%>80v.\\+', -1)

" Local config
if filereadable(".vimrc.local")
  source .vimrc.local
endif

